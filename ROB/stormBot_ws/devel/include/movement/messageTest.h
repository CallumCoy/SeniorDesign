// Generated by gencpp from file movement/messageTest.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MESSAGE_MESSAGETEST_H
#define MOVEMENT_MESSAGE_MESSAGETEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement
{
template <class ContainerAllocator>
struct messageTest_
{
  typedef messageTest_<ContainerAllocator> Type;

  messageTest_()
    : name()
    , id(0)
    , xLin(0.0)
    , xAng(0.0)
    , yAng(0.0)  {
    }
  messageTest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , id(0)
    , xLin(0.0)
    , xAng(0.0)
    , yAng(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef int32_t _id_type;
  _id_type id;

   typedef float _xLin_type;
  _xLin_type xLin;

   typedef float _xAng_type;
  _xAng_type xAng;

   typedef float _yAng_type;
  _yAng_type yAng;





  typedef boost::shared_ptr< ::movement::messageTest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement::messageTest_<ContainerAllocator> const> ConstPtr;

}; // struct messageTest_

typedef ::movement::messageTest_<std::allocator<void> > messageTest;

typedef boost::shared_ptr< ::movement::messageTest > messageTestPtr;
typedef boost::shared_ptr< ::movement::messageTest const> messageTestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement::messageTest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement::messageTest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement::messageTest_<ContainerAllocator1> & lhs, const ::movement::messageTest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.id == rhs.id &&
    lhs.xLin == rhs.xLin &&
    lhs.xAng == rhs.xAng &&
    lhs.yAng == rhs.yAng;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement::messageTest_<ContainerAllocator1> & lhs, const ::movement::messageTest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::movement::messageTest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement::messageTest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement::messageTest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement::messageTest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement::messageTest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement::messageTest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement::messageTest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e15c1b00b8cc33d2ad11a9fcc899b06f";
  }

  static const char* value(const ::movement::messageTest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe15c1b00b8cc33d2ULL;
  static const uint64_t static_value2 = 0xad11a9fcc899b06fULL;
};

template<class ContainerAllocator>
struct DataType< ::movement::messageTest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement/messageTest";
  }

  static const char* value(const ::movement::messageTest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement::messageTest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"int32 id\n"
"float32 xLin\n"
"float32 xAng\n"
"float32 yAng\n"
;
  }

  static const char* value(const ::movement::messageTest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement::messageTest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.id);
      stream.next(m.xLin);
      stream.next(m.xAng);
      stream.next(m.yAng);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct messageTest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement::messageTest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement::messageTest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "xLin: ";
    Printer<float>::stream(s, indent + "  ", v.xLin);
    s << indent << "xAng: ";
    Printer<float>::stream(s, indent + "  ", v.xAng);
    s << indent << "yAng: ";
    Printer<float>::stream(s, indent + "  ", v.yAng);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MESSAGE_MESSAGETEST_H
